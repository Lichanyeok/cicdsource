name: CI-CDpipeline #Workflow의 이름
on: #Workflow를 언제 실행할지 조건 설정 (이벤트 트리거)
  push: # main 브랜치에 push 할 때 실행 시키겠다.
    branches:
      - main
jobs:
  build-and-deploy: # job 명칭
    runs-on: ubuntu-latest # ubuntu 가상 머신에서 사용하겠다 , 요구되는 소프트웨어(docker , java등)는 GithubActions에서 자동으로 설치해줍니다.
    steps:
    #uses: 다른 사람이 만든 액션을 재사용, run: 직접 명령어를 실행 하는 것
      # 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3 # Github이 공식 제공하는 Action

      # Java 17 설정 (예: Spring Boot 애플리케이션 빌드를 위해)
      - name: Set up JDK 17
        uses: actions/setup-java@v3 #temurin 배포판 자바 17버전 JDK를 runner에 설치 하기 위해 작성.
        with:
          distribution: 'temurin'
          java-version: '17'

      # ./Gradle로 애플리케이션 빌드 (테스트 포함 가능; 여기서는 간단히 테스트 생략)
      - name: Build application
        run: ./gradlew clean build -x test

      # DockerHub 로그인 (시크릿에 저장된 자격증명 사용)
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Docker 이미지 빌드 (태그에 GitHub 커밋 SHA 사용)
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/cicdsource:${{ github.sha }} .

      # Docker 이미지 DockerHub에 푸시
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cicdsource:${{ github.sha }}
